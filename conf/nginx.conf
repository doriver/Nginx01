
#user  nobody;
worker_processes  1; # 컨테이너 쪽이랑 다름

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

# 캐시 관련 로그 설정
    log_format cache '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$upstream_cache_status';

    access_log logs/access.log cache;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

# 로드밸런싱할 서버 그룹을 정의
    # upstream backend {
        #least_conn;   #각 요청을 서버에 할당된 가중치를 고려해 연결 수가 가장 적은 서버로 전송 (기본: 요청을 순서대로 처리)
        #ip_hash; # 클라이언트의 IP 주소를 해싱하여 특정 백엔드 서버에 매핑, 같은 클라이언트는 항상 동일한 서버로 요청을 보냄
        # server localhost:8080;
        # server localhost:8082;
    # }

# 캐시 디렉토리와 캐시 키 정의 , 캐시 구성 설정
    proxy_cache_path D:/Nginx/nginx-1.26.1/path/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

     # 공통 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;   # 클라이언트 실제IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   # 필수, 클라이언트IP + 요청이 지나온 프록시 서버의 IP
        proxy_set_header X-Forwarded-Proto $scheme;

        # CSS와 JS 파일 캐싱
        location ~* \.(css|js)$ {

            # 캐싱 설정
            proxy_cache my_cache;
            proxy_cache_valid 200 302 10m; # 200과 302 응답 코드에 대해 10분 동안 캐시를 유지
            proxy_cache_valid 404 1m; # 404 응답 코드에 대해 1분 동안 유지
            
            proxy_pass http://localhost:8080;

            add_header X-Cache-Status $upstream_cache_status;  # 응답 헤더에 캐시 상태를 추가
        }
    
        
        location /images/ {
            proxy_pass http://localhost:8080;

            add_header Cache-Control "public";
            expires 2h; 
        }

        location / {
            #root   html;
            #index  index.html index.htm;
            # proxy_pass http://backend;   # 요청을 여기로 전달 
            proxy_pass http://localhost:8080;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
